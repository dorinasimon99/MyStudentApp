type UserData
@model
@auth(rules: [ { allow: owner, operations: [create, update, delete] }])
{
  id: ID!
  name: String
  role: String!
  grade: Int
  courses: [UserCourse] @connection(name: "UserCourses")
  cards: [CardData] @connection(keyName: "byUser", fields: ["id"])
  quizzes: [QuizData] @connection(keyName: "byUser", fields: ["id"])
}

type CourseData
@model
@auth(rules: [ { allow: owner, operations: [create, delete] } ])
{
  id: ID!
  courseCode: String!
  name: String!
  users: [UserCourse] @connection(name: "CourseUsers")
  credits: Int!
  cards: [CardData] @connection(keyName: "byCourse", fields: ["id"])
  quizzes: [QuizData] @connection(keyName: "byCourse", fields: ["id"])
  time: String!
}

type UserCourse
@model
@auth (rules: [ { allow : owner, operations: [create, update, delete] } ])
{
  id: ID!
  user: UserData! @connection(name: "UserCourses")
  course: CourseData! @connection(name: "CourseUsers")
}


type CardData
@model
@auth(rules: [ { allow: owner, operations: [create, delete] } ]) 
@key(name: "byUser", fields: ["ownerID"]) @key(name: "byCourse", fields: ["courseID"])
{
  id: ID!
  ownerID: ID!
  owner: UserData @connection(fields: ["ownerID"])
  courseID: ID!
  course: CourseData @connection(fields: ["courseID"])
  cardQuestions: [String]
  cardAnswers: [String]
}

type QuizData
@model
@auth(rules: [ { allow: owner, operations: [create, update, delete] } ])
@key(name: "byUser", fields: ["ownerID"]) @key(name: "byCourse", fields: ["courseID"])
{
  id: ID!
  ownerID: ID!
  owner: UserData @connection(fields: ["ownerID"])
  courseID: ID!
  course: CourseData @connection(fields: ["courseID"])
  quizQuestions: [String]
  quizAnswers: [String]
}